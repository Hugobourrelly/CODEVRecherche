# -*- coding: utf-8 -*-
"""
Created on Wed May 24 08:22:46 2023

@author: hugob
"""

import pandas as pd
import numpy as np
from os import listdir
from math import pi

def triSimultListes(L,X):
    """Renvoie une liste de L triée Lprime et une liste de liste Xtri
    dont pour chacune des listees contenue dans X, elles ont subit les 
    permutations nécéssaires a trier L
    """
    n=len(L)
    taille=len(X)
    Ltri=[]
    Xtri=[[] for i in range(taille)]
    N_ind=[]
    for i in range(n):
        ind=L.index(min([L[i] for i in range(n) if i not in N_ind]))
        N_ind.append(ind) 
        Ltri.append(L[ind])
        for j in range(taille):
            Xtri[j].append(X[j][ind])
    return Ltri,Xtri    

def indicepluspetitquex(L,x):
    """Donne le plus grand indice n de L dont L[n]<x"""
    n=0
    taille=len(L)
    while n<taille-1 and L[n+1]<x:
        n+=1
    return n
    

def couranttofield(I,chemin_étalon):
    """Couvertit le courant en champ par un DL ordre 1
    Prend en paramètre le chemin d'accès vers le fichier étalon
    Présenté sous la forme:
    #I H
    3.000000 -0.480950
    2.969467 -0.479033
    2.932026 -0.477116
    ...
    """
    étalon=pd.read_csv(chemin_étalon,sep=' ',skiprows=2,engine='python')
    coura=list(étalon[((étalon.columns)[0])])[::-1]
    champ=list(étalon[((étalon.columns)[1])])[::-1]
    ind=indicepluspetitquex(coura,I)
    return champ[ind]+(I-coura[ind])*(champ[ind]-champ[ind-1])/(coura[ind]-coura[ind-1])        

def extraction(chemin_data_set,chemin_étalon):
    """
    Extrait les données d'un balayage en fréquence suivant un modèle de rangement précis:
    Le chemin de étalon doit être un fichier txt 
    Présenté sous la forme:
    #I H
    3.000000 -0.480950
    2.969467 -0.479033
    2.932026 -0.477116
    ...
    Le chemin du data set doit être un dossier où les fichiers txt contenus respectent tous:
    -Un nom sous la forme : "*=[valeur_courantcourant]A"
    -Le contenu doit être présenté sous la forme:
    [Première colonne ignorée, mais ne doit pas etre vide]
    # Freq(GHz) 	 Re(S11) 	 Im(S11) 	 Re(S12) 	 Im(S12) 	 Re(S21) 	 Im(S21) 	 Re(S22) 	 Im(S22) 	 Re(DeltaL11)	Im(DeltaL11)	Re(DeltaL12)	Im(DeltaL12)	Re(DeltaL21)	Im(DeltaL21)	Re(DeltaL22)	Im(DeltaL22)
    0.100000	0.040282	-0.033719	0.814930	-0.041364	0.814070	-0.041008	0.043746	-0.035931	-0.012059	0.193181	0.408973	5.910677	0.391230	5.588004	0.031156	0.086962
    0.149875	0.032157	-0.034967	0.805176	-0.049629	0.804147	-0.050317	0.033196	-0.036872	0.017003	0.125999	-0.941308	5.448177	-0.791285	5.685686	-0.001591	0.170790
    ...
    Retourne une liste de liste: de champ, de la partie imaginaire,partie réelle,
    des fréquences balayées, du courant triées par champ croissant.
    """
    listfichier=listdir(chemin_data_set)
    H=[]
    FreqL=[]
    Im=[]
    Re=[]
    Courant=[]
    n=0
    for i in listfichier:
        n+=1
        courant=float((i.split("=")[1]).split("A")[0]) #Récupération du courant fournit dans le titre
        a=pd.read_csv(chemin_data_set+r'\\'+i,sep='	',skiprows=1) # skiprows=1 on ignore la 1ere colonne
        ImL12=list(a["Im(DeltaL12)"])
        ReL12=list(a["Re(DeltaL12)"])
        Freq=list(a['# Freq(GHz) '])
        Courant.append(courant)
        H.append(round(couranttofield(courant,chemin_étalon), 4))
        FreqL.append(Freq)
        Re.append(ReL12)
        Im.append(ImL12)
    """Tri croissant suivant les valeurs de champs de tout les paramètres d'interet"""
    Htri,[Imtri,Retri,FreqLtri,Couranttri]=triSimultListes(H,[Im,Re,FreqL,Courant])
    """Conversion en tableaux numpy"""
    Im1=np.array(Imtri)
    FreqL1=np.array(FreqLtri[0])
    Re1=np.array(Retri)
    return Htri,Im1,Re1,FreqL1,Couranttri

def extraction2(chemin_data_set,chemin_étalon):
    listfichier=listdir(chemin_data_set)
    H=[]
    FreqL=[]
    Im=[]
    Re=[]
    Courant=[]
    n=0
    for i in listfichier:
        n+=1
        courant=float((i.split("=")[1]).split("A")[0]) #Récupération du courant fournit dans le titre
        a=pd.read_csv(chemin_data_set+r'\\'+i,sep='	',skiprows=1) # skiprows=1 on ignore la 1ere colonne
        ImL12=list(a["Im(DeltaL12)"])
        ReL12=list(a["Re(DeltaL12)"])
        Freq=list(a['# Freq(GHz) '])
        
        S11_real=np.array(list(a[r" Re(S11) "]))
        S22_real=np.array(list(a[r" Re(S22) "]))
        S11_imag=np.array(list(a[r" Im(S11) "]))
        S22_imag=np.array(list(a[r" Im(S22) "]))
        S12_real=np.array(list(a[r" Re(S12) "]))
        S21_real=np.array(list(a[r" Re(S21) "]))
        S12_imag=np.array(list(a[r" Im(S12) "]))
        S21_imag=np.array(list(a[r" Im(S21) "]))
        
        S12l=[np.complex(S12_real[i],S12_imag[i]) for i in range(len(S12_imag))]
        S21l=[np.complex(S21_real[i],S21_imag[i]) for i in range(len(S21_imag))]
        S11l=[np.complex(S11_real[i],S11_imag[i]) for i in range(len(S11_imag))]
        S22l=[np.complex(S22_real[i],S22_imag[i]) for i in range(len(S22_imag))]
        
        
        S12=np.array(S12l)
        S21=np.array(S21l)
        S11=np.array(S11l)
        S22=np.array(S22l)
        
        Z12=2*50*(S12)/((1-S11)*(1-S22)-S12*S21)
        Freqc=np.array([np.complex((Freq[i]),0) for i in range(len(Freq))])
        
        L12=Z12*(np.complex(0,-1)/((2*pi*Freqc)))
        
        LIm = np.imag(Z12)
        LRe = np.real(Z12)
        
        
        Courant.append(courant)
        H.append(round(couranttofield(courant,chemin_étalon), 4))
        FreqL.append(Freq)
        Re.append(LRe)
        Im.append(LIm)
    """Tri croissant suivant les valeurs de champs de tout les paramètres d'interet"""
    Htri,[Imtri,Retri,FreqLtri,Courant]=triSimultListes(H,[Im,Re,FreqL,Courant])
    """Conversion en tableaux numpy"""
    Im1=np.array(Imtri)
    FreqL1=np.array(FreqLtri[0])
    Re1=np.array(Retri)
    return Htri,Im1,Re1,FreqL1,Courant